"This awesome color scheme
"colorscheme gruvbox

" Mappings 
ino jj <esc>
cno jj <c-c>

map tt :tabnew <Enter>  "Open new tab

" Syntatic 
let g:syntastic_auto_loc_list=0
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_open=0
let g:syntastic_javascript_checkers = ['jscs', 'jsxhint']
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_enable_highlighting=0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_aggregate_errors = 1

"save the current buffer
imap <c-s> :w<CR>
vmap <c-s> <Esc><c-s>gv
imap <c-s> <Esc><c-s>

nmap <F2> :update<CR>
vmap <F2> <Esc><F2>gv
imap <F2> <c-o><F2>

"""""""""""""""""""""""""""""""""""""""""
" use :w!! to write to a file using     "
" sudo if you forgot to 'sudo vim file' "
" (it will prompt for sudo password     "
" when writing)                         "
"""""""""""""""""""""""""""""""""""""""""
cmap w!! w !sudo tee > /dev/null %

"""""""""""""""""""""""""""""""""""""""""
"NERDTree configuration"
"""""""""""""""""""""""""""""""""""""""""
map <leader>n :NERDTreeToggle<CR>
nmap <leader>m :NERDTreeFind<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

""""""""""""""""""""""""""""""""""""""""""""""
" COPY and Paste from the clipboard register " 
""""""""""""""""""""""""""""""""""""""""""""""

" CTRL-X and SHIFT-Del are Cut
vnoremap <C-X> "+x
vnoremap <S-Del> "+x

" CTRL-C and CTRL-Insert are Copy
vnoremap <C-C> "+y
vnoremap <C-Insert> "+y

" CTRL-V and SHIFT-Insert are Paste
map <C-V> "+gP
map <S-Insert> "+gP

cmap <C-V> <C-R>+
cmap <S-Insert> <C-R>+

" Pasting blockwise and linewise selections is not possible in Insert and
" Visual mode without the +virtualedit feature.  They are pasted as if they
" were characterwise instead.
" Uses the paste.vim autoload script.

exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

imap <S-Insert> <C-V>
vmap <S-Insert> <C-V>

" Use CTRL-Q to do what CTRL-V used to do
noremap <C-Q> <C-V>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
" Go to the next error 
map <leader>sn ]s 
" Go to the previous error 
map <leader>sp [s
" Add the word to the dictionary
map <leader>sa zg
" Get list of suggestions 
map <leader>sd z=

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

set tabstop=2       " The width of a TAB is set to 2g.
set shiftwidth=2    " Indents will have a width of 2g
set softtabstop=2   " Sets the number of columns for a TAB
set expandtab       " Expand TABs to spaces

" Startify 
autocmd User Startified setlocal buftype=
let g:ctrlp_reuse_window = 'startify'
set sessionoptions=blank,curdir,folds,tabpages,winpos

" The Silver Searcher
"if executable('ag')
  " Use ag over grep
"  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
"  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
"  let g:ctrlp_use_caching = 0
"endif
" bind K to grep word under cursor
"nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
"command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
"nnoremap \ :Ag<SPACE>

" JSX syntax highlighting
"let g:jsx_ext_required = 0
""""
" NPM 
""""
command -nargs=* Npm !npm --no-color <args>

""""""
"""" PERFORMANCE IMPROVEMENT 
"" http://stackoverflow.com/questions/4775605/vim-syntax-highlight-improve-performance
"set nocursorcolumn
"set nocursorline
"set norelativenumber
syntax sync minlines=256

set list
set listchars=""                  "  "
set listchars=tab:▸\              " a tab should display as "▸" "
set listchars+=trail:·            " show trailing spaces as "·"  "
set listchars+=extends:◄          " The character to show in the last column when wrap is off and the line continues beyond the right of the screen
set listchars+=precedes:►         " The character to show in the last column when wrap is off and the line continues beyond the right of the screen  "
