
" Mappings 
ino jj <esc>
cno jj <c-c>

map tt :tabnew <Enter>  "Open new tab

" Syntatic 
let g:syntastic_auto_loc_list=0
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_open=0
let g:syntastic_javascript_checkers = ['semistandard']
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_enable_highlighting=0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_aggregate_errors = 1

"save the current buffer
imap <c-s> :w<CR>
vmap <c-s> <Esc><c-s>gv
imap <c-s> <Esc><c-s>

nmap <F2> :update<CR>
vmap <F2> <Esc><F2>gv
imap <F2> <c-o><F2>

"""""""""""""""""""""""""""""""""""""""""
" use :w!! to write to a file using     "
" sudo if you forgot to 'sudo vim file' "
" (it will prompt for sudo password     "
" when writing)                         "
"""""""""""""""""""""""""""""""""""""""""
cmap w!! w !sudo tee > /dev/null %

"""""""""""""""""""""""""""""""""""""""""
"NERDTree configuration"
"""""""""""""""""""""""""""""""""""""""""
let NERDTreeChDirMode = 0
map <leader>n :NERDTreeToggle<CR>
nmap <leader>m :NERDTreeFind<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif


""""""""""""""""""""""""""""""""""""""""""""""
" COPY and Paste from the clipboard register " 
""""""""""""""""""""""""""""""""""""""""""""""

" CTRL-X and SHIFT-Del are Cut
" vnoremap <C-X> "+x
" vnoremap <S-Del> "+x

" CTRL-C and CTRL-Insert are Copy
" vnoremap <C-C> "+y
" vnoremap <C-Insert> "+y

" CTRL-V and SHIFT-Insert are Paste
" map <C-V> "+gP
" map <S-Insert> "+gP

"  cmap <C-V> <C-R>+
"  cmap <S-Insert> <C-R>+

" Pasting blockwise and linewise selections is not possible in Insert and
" Visual mode without the +virtualedit feature.  They are pasted as if they
" were characterwise instead.
" Uses the paste.vim autoload script.

" exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
"exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

"imap <S-Insert> <C-V>
"vmap <S-Insert> <C-V>

" Use CTRL-Q to do what CTRL-V used to do
"noremap <C-Q> <C-V>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
" Go to the next error 
map <leader>sn ]s 
" Go to the previous error 
map <leader>sp [s
" Add the word to the dictionary
map <leader>sa zg
" Get list of suggestions 
map <leader>sd z=

" Map ctrl-movement keys to window switching
 map <C-k> <C-w><Up>
 map <C-j> <C-w><Down>
 map <C-l> <C-w><Right>
 map <C-h> <C-w><Left>

set tabstop=2       " The width of a TAB is set to 2g.
set shiftwidth=2    " Indents will have a width of 2g
set softtabstop=2   " Sets the number of columns for a TAB
set expandtab       " Expand TABs to spaces

" Startify 
autocmd User Startified setlocal buftype=
let g:ctrlp_reuse_window = 'startify'
set sessionoptions=blank,curdir,folds,tabpages,winpos

" The Silver Searcher

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

  nnoremap <silent> K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>
  nnoremap ff :Ag<SPACE>
endif

" JSX syntax highlighting
let g:jsx_ext_required = 0
""""
" NPM 
""""
command -nargs=* Npm !npm --no-color <args>

""""""
"""" PERFORMANCE IMPROVEMENT 
"" http://stackoverflow.com/questions/4775605/vim-syntax-highlight-improve-performance
"set nocursorcolumn
"set nocursorline
"set norelativenumber
syntax sync minlines=256

set list
set listchars=""                  "  "
set listchars=tab:▸\              " a tab should display as "▸" "
set listchars+=trail:·            " show trailing spaces as "·"  "
set listchars+=extends:◄          " The character to show in the last column when wrap is off and the line continues beyond the right of the screen
set listchars+=precedes:►         " The character to show in the last column when wrap is off and the line continues beyond the right of the screen  "

"Use TAB to complete when typing words, else inserts TABs as usual.
"Uses dictionary and source files to find matching words to complete.

"See help completion for source,
"Note: usual completion is on <C-n> but more trouble to press all the time.
"Never type the same word twice and maybe learn a new spellings!
"Use the Linux dictionary when spelling is in doubt.
"Window users can copy the file to their machine.
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](doc|tmp|dist|node_modules)',
  \ 'file': '\v\.(exe|so|dll|.min.js)$',
  \ }

nmap <D-/> <leader>c<Space>
vmap <D-/> <leader>c<Space>

vnoremap > >gv
vnoremap < <gv

